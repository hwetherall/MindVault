"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/utils/formatters.ts":
/*!*********************************!*\
  !*** ./app/utils/formatters.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatNumbersInText: () => (/* binding */ formatNumbersInText),\n/* harmony export */   splitAnswerContent: () => (/* binding */ splitAnswerContent)\n/* harmony export */ });\n/**\r\n * Utility functions for formatting text in the application\r\n */ /**\r\n * Format numbers in text to 2 decimal places maximum\r\n * @param text Text containing numbers to format\r\n * @returns Formatted text\r\n */ const formatNumbersInText = (text)=>{\n    if (!text) return '';\n    // Ensure text is a string\n    if (typeof text !== 'string') {\n        text = String(text);\n    }\n    // Regular expression to find numbers with decimal points\n    // This regex looks for numbers that have a decimal point followed by at least one digit\n    let formattedText = text;\n    // Format currency values with $ symbols (like $123.4567 to $123.46)\n    formattedText = formattedText.replace(/\\$\\s*(\\d+\\.\\d+)/g, (match, number)=>{\n        return \"$\".concat(parseFloat(number).toFixed(2));\n    });\n    // Format currency values with currency codes (like USD$123.4567 to USD$123.46)\n    formattedText = formattedText.replace(/(AU|USD|EUR|GBP|CAD|AUD)\\$\\s*(\\d+\\.\\d+)/g, (match, currency, number)=>{\n        return \"\".concat(currency, \"$\").concat(parseFloat(number).toFixed(2));\n    });\n    // Format percentages (like 12.3456% to 12.35%)\n    formattedText = formattedText.replace(/(\\d+\\.\\d+)%/g, (match, number)=>{\n        return \"\".concat(parseFloat(number).toFixed(2), \"%\");\n    });\n    // Format standalone numbers with 3 or more decimal places (like 123.4567 to 123.46)\n    formattedText = formattedText.replace(/(\\d+\\.\\d{3,})(?!\\w)/g, (match)=>{\n        return parseFloat(match).toFixed(2);\n    });\n    return formattedText;\n};\n/**\r\n * Split answer content into TLDR and details sections and clean up asterisks\r\n * @param content Answer content to split\r\n * @returns Object containing tldr and details sections\r\n */ const splitAnswerContent = (content)=>{\n    // Ensure content is a string\n    if (!content || typeof content !== 'string') {\n        return {\n            tldr: '',\n            details: ''\n        };\n    }\n    const parts = content.split('DETAILS:');\n    if (parts.length === 1) {\n        // Clean up asterisks in content if no DETAILS section\n        let cleanContent = parts[0].trim();\n        cleanContent = cleanContent.replace('TL;DR:', '').trim();\n        // Remove markdown bold/italic formatting\n        cleanContent = cleanContent.replace(/\\*\\*(.*?)\\*\\*/g, '$1'); // Bold\n        cleanContent = cleanContent.replace(/\\*(.*?)\\*/g, '$1'); // Italic\n        cleanContent = cleanContent.replace(/\\*+/g, ''); // Any remaining asterisks\n        return {\n            tldr: cleanContent,\n            details: ''\n        };\n    }\n    // Process TL;DR section\n    let tldr = parts[0].trim();\n    tldr = tldr.replace('TL;DR:', '').trim();\n    // Process DETAILS section\n    let details = parts[1].trim();\n    // Remove markdown bold/italic formatting from both sections\n    tldr = tldr.replace(/\\*\\*(.*?)\\*\\*/g, '$1');\n    tldr = tldr.replace(/\\*(.*?)\\*/g, '$1');\n    tldr = tldr.replace(/\\*+/g, '');\n    details = details.replace(/\\*\\*(.*?)\\*\\*/g, '$1');\n    details = details.replace(/\\*(.*?)\\*/g, '$1');\n    details = details.replace(/\\*+/g, '');\n    return {\n        tldr: tldr,\n        details: details\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC91dGlscy9mb3JtYXR0ZXJzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7OztDQUlDLEdBQ00sTUFBTUEsc0JBQXNCLENBQUNDO0lBQ2xDLElBQUksQ0FBQ0EsTUFBTSxPQUFPO0lBRWxCLDBCQUEwQjtJQUMxQixJQUFJLE9BQU9BLFNBQVMsVUFBVTtRQUM1QkEsT0FBT0MsT0FBT0Q7SUFDaEI7SUFFQSx5REFBeUQ7SUFDekQsd0ZBQXdGO0lBQ3hGLElBQUlFLGdCQUFnQkY7SUFFcEIsb0VBQW9FO0lBQ3BFRSxnQkFBZ0JBLGNBQWNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQ0MsT0FBT0M7UUFDaEUsT0FBTyxJQUFrQyxPQUE5QkMsV0FBV0QsUUFBUUUsT0FBTyxDQUFDO0lBQ3hDO0lBRUEsK0VBQStFO0lBQy9FTCxnQkFBZ0JBLGNBQWNDLE9BQU8sQ0FBQyw0Q0FBNEMsQ0FBQ0MsT0FBT0ksVUFBVUg7UUFDbEcsT0FBTyxHQUFlQyxPQUFaRSxVQUFTLEtBQWlDLE9BQTlCRixXQUFXRCxRQUFRRSxPQUFPLENBQUM7SUFDbkQ7SUFFQSwrQ0FBK0M7SUFDL0NMLGdCQUFnQkEsY0FBY0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDQyxPQUFPQztRQUM1RCxPQUFPLEdBQWlDLE9BQTlCQyxXQUFXRCxRQUFRRSxPQUFPLENBQUMsSUFBRztJQUMxQztJQUVBLG9GQUFvRjtJQUNwRkwsZ0JBQWdCQSxjQUFjQyxPQUFPLENBQUMsd0JBQXdCLENBQUNDO1FBQzdELE9BQU9FLFdBQVdGLE9BQU9HLE9BQU8sQ0FBQztJQUNuQztJQUVBLE9BQU9MO0FBQ1QsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNTyxxQkFBcUIsQ0FBQ0M7SUFDakMsNkJBQTZCO0lBQzdCLElBQUksQ0FBQ0EsV0FBVyxPQUFPQSxZQUFZLFVBQVU7UUFDM0MsT0FBTztZQUFFQyxNQUFNO1lBQUlDLFNBQVM7UUFBRztJQUNqQztJQUVBLE1BQU1DLFFBQVFILFFBQVFJLEtBQUssQ0FBQztJQUU1QixJQUFJRCxNQUFNRSxNQUFNLEtBQUssR0FBRztRQUN0QixzREFBc0Q7UUFDdEQsSUFBSUMsZUFBZUgsS0FBSyxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtRQUNoQ0QsZUFBZUEsYUFBYWIsT0FBTyxDQUFDLFVBQVUsSUFBSWMsSUFBSTtRQUV0RCx5Q0FBeUM7UUFDekNELGVBQWVBLGFBQWFiLE9BQU8sQ0FBQyxrQkFBa0IsT0FBTyxPQUFPO1FBQ3BFYSxlQUFlQSxhQUFhYixPQUFPLENBQUMsY0FBYyxPQUFXLFNBQVM7UUFDdEVhLGVBQWVBLGFBQWFiLE9BQU8sQ0FBQyxRQUFRLEtBQWlCLDBCQUEwQjtRQUV2RixPQUFPO1lBQ0xRLE1BQU1LO1lBQ05KLFNBQVM7UUFDWDtJQUNGO0lBRUEsd0JBQXdCO0lBQ3hCLElBQUlELE9BQU9FLEtBQUssQ0FBQyxFQUFFLENBQUNJLElBQUk7SUFDeEJOLE9BQU9BLEtBQUtSLE9BQU8sQ0FBQyxVQUFVLElBQUljLElBQUk7SUFFdEMsMEJBQTBCO0lBQzFCLElBQUlMLFVBQVVDLEtBQUssQ0FBQyxFQUFFLENBQUNJLElBQUk7SUFFM0IsNERBQTREO0lBQzVETixPQUFPQSxLQUFLUixPQUFPLENBQUMsa0JBQWtCO0lBQ3RDUSxPQUFPQSxLQUFLUixPQUFPLENBQUMsY0FBYztJQUNsQ1EsT0FBT0EsS0FBS1IsT0FBTyxDQUFDLFFBQVE7SUFFNUJTLFVBQVVBLFFBQVFULE9BQU8sQ0FBQyxrQkFBa0I7SUFDNUNTLFVBQVVBLFFBQVFULE9BQU8sQ0FBQyxjQUFjO0lBQ3hDUyxVQUFVQSxRQUFRVCxPQUFPLENBQUMsUUFBUTtJQUVsQyxPQUFPO1FBQ0xRLE1BQU1BO1FBQ05DLFNBQVNBO0lBQ1g7QUFDRixFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGh3ZXRoXFxPbmVEcml2ZVxcRGVza3RvcFxcSW5ub3ZlcmFcXEhpZ2dpbnNcXE1pbmRWYXVsdFxcTWluZFZhdWx0LTFcXG1pbmR2YXVsdFxcYXBwXFx1dGlsc1xcZm9ybWF0dGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGZvcm1hdHRpbmcgdGV4dCBpbiB0aGUgYXBwbGljYXRpb25cclxuICovXHJcblxyXG4vKipcclxuICogRm9ybWF0IG51bWJlcnMgaW4gdGV4dCB0byAyIGRlY2ltYWwgcGxhY2VzIG1heGltdW1cclxuICogQHBhcmFtIHRleHQgVGV4dCBjb250YWluaW5nIG51bWJlcnMgdG8gZm9ybWF0XHJcbiAqIEByZXR1cm5zIEZvcm1hdHRlZCB0ZXh0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZm9ybWF0TnVtYmVyc0luVGV4dCA9ICh0ZXh0OiBzdHJpbmcgfCBhbnkpOiBzdHJpbmcgPT4ge1xyXG4gIGlmICghdGV4dCkgcmV0dXJuICcnO1xyXG4gIFxyXG4gIC8vIEVuc3VyZSB0ZXh0IGlzIGEgc3RyaW5nXHJcbiAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJykge1xyXG4gICAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcclxuICB9XHJcblxyXG4gIC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBmaW5kIG51bWJlcnMgd2l0aCBkZWNpbWFsIHBvaW50c1xyXG4gIC8vIFRoaXMgcmVnZXggbG9va3MgZm9yIG51bWJlcnMgdGhhdCBoYXZlIGEgZGVjaW1hbCBwb2ludCBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgZGlnaXRcclxuICBsZXQgZm9ybWF0dGVkVGV4dCA9IHRleHQ7XHJcblxyXG4gIC8vIEZvcm1hdCBjdXJyZW5jeSB2YWx1ZXMgd2l0aCAkIHN5bWJvbHMgKGxpa2UgJDEyMy40NTY3IHRvICQxMjMuNDYpXHJcbiAgZm9ybWF0dGVkVGV4dCA9IGZvcm1hdHRlZFRleHQucmVwbGFjZSgvXFwkXFxzKihcXGQrXFwuXFxkKykvZywgKG1hdGNoLCBudW1iZXIpID0+IHtcclxuICAgIHJldHVybiBgJCR7cGFyc2VGbG9hdChudW1iZXIpLnRvRml4ZWQoMil9YDtcclxuICB9KTtcclxuICBcclxuICAvLyBGb3JtYXQgY3VycmVuY3kgdmFsdWVzIHdpdGggY3VycmVuY3kgY29kZXMgKGxpa2UgVVNEJDEyMy40NTY3IHRvIFVTRCQxMjMuNDYpXHJcbiAgZm9ybWF0dGVkVGV4dCA9IGZvcm1hdHRlZFRleHQucmVwbGFjZSgvKEFVfFVTRHxFVVJ8R0JQfENBRHxBVUQpXFwkXFxzKihcXGQrXFwuXFxkKykvZywgKG1hdGNoLCBjdXJyZW5jeSwgbnVtYmVyKSA9PiB7XHJcbiAgICByZXR1cm4gYCR7Y3VycmVuY3l9JCR7cGFyc2VGbG9hdChudW1iZXIpLnRvRml4ZWQoMil9YDtcclxuICB9KTtcclxuICBcclxuICAvLyBGb3JtYXQgcGVyY2VudGFnZXMgKGxpa2UgMTIuMzQ1NiUgdG8gMTIuMzUlKVxyXG4gIGZvcm1hdHRlZFRleHQgPSBmb3JtYXR0ZWRUZXh0LnJlcGxhY2UoLyhcXGQrXFwuXFxkKyklL2csIChtYXRjaCwgbnVtYmVyKSA9PiB7XHJcbiAgICByZXR1cm4gYCR7cGFyc2VGbG9hdChudW1iZXIpLnRvRml4ZWQoMil9JWA7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8gRm9ybWF0IHN0YW5kYWxvbmUgbnVtYmVycyB3aXRoIDMgb3IgbW9yZSBkZWNpbWFsIHBsYWNlcyAobGlrZSAxMjMuNDU2NyB0byAxMjMuNDYpXHJcbiAgZm9ybWF0dGVkVGV4dCA9IGZvcm1hdHRlZFRleHQucmVwbGFjZSgvKFxcZCtcXC5cXGR7Myx9KSg/IVxcdykvZywgKG1hdGNoKSA9PiB7XHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaCkudG9GaXhlZCgyKTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGZvcm1hdHRlZFRleHQ7XHJcbn07XHJcblxyXG4vKipcclxuICogU3BsaXQgYW5zd2VyIGNvbnRlbnQgaW50byBUTERSIGFuZCBkZXRhaWxzIHNlY3Rpb25zIGFuZCBjbGVhbiB1cCBhc3Rlcmlza3NcclxuICogQHBhcmFtIGNvbnRlbnQgQW5zd2VyIGNvbnRlbnQgdG8gc3BsaXRcclxuICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgdGxkciBhbmQgZGV0YWlscyBzZWN0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHNwbGl0QW5zd2VyQ29udGVudCA9IChjb250ZW50OiBzdHJpbmcgfCBhbnkpID0+IHtcclxuICAvLyBFbnN1cmUgY29udGVudCBpcyBhIHN0cmluZ1xyXG4gIGlmICghY29udGVudCB8fCB0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiB7IHRsZHI6ICcnLCBkZXRhaWxzOiAnJyB9O1xyXG4gIH1cclxuICBcclxuICBjb25zdCBwYXJ0cyA9IGNvbnRlbnQuc3BsaXQoJ0RFVEFJTFM6Jyk7XHJcbiAgXHJcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgLy8gQ2xlYW4gdXAgYXN0ZXJpc2tzIGluIGNvbnRlbnQgaWYgbm8gREVUQUlMUyBzZWN0aW9uXHJcbiAgICBsZXQgY2xlYW5Db250ZW50ID0gcGFydHNbMF0udHJpbSgpO1xyXG4gICAgY2xlYW5Db250ZW50ID0gY2xlYW5Db250ZW50LnJlcGxhY2UoJ1RMO0RSOicsICcnKS50cmltKCk7XHJcbiAgICBcclxuICAgIC8vIFJlbW92ZSBtYXJrZG93biBib2xkL2l0YWxpYyBmb3JtYXR0aW5nXHJcbiAgICBjbGVhbkNvbnRlbnQgPSBjbGVhbkNvbnRlbnQucmVwbGFjZSgvXFwqXFwqKC4qPylcXCpcXCovZywgJyQxJyk7IC8vIEJvbGRcclxuICAgIGNsZWFuQ29udGVudCA9IGNsZWFuQ29udGVudC5yZXBsYWNlKC9cXCooLio/KVxcKi9nLCAnJDEnKTsgICAgIC8vIEl0YWxpY1xyXG4gICAgY2xlYW5Db250ZW50ID0gY2xlYW5Db250ZW50LnJlcGxhY2UoL1xcKisvZywgJycpOyAgICAgICAgICAgICAvLyBBbnkgcmVtYWluaW5nIGFzdGVyaXNrc1xyXG4gICAgXHJcbiAgICByZXR1cm4geyBcclxuICAgICAgdGxkcjogY2xlYW5Db250ZW50LCBcclxuICAgICAgZGV0YWlsczogJycgXHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICAvLyBQcm9jZXNzIFRMO0RSIHNlY3Rpb25cclxuICBsZXQgdGxkciA9IHBhcnRzWzBdLnRyaW0oKTtcclxuICB0bGRyID0gdGxkci5yZXBsYWNlKCdUTDtEUjonLCAnJykudHJpbSgpO1xyXG4gIFxyXG4gIC8vIFByb2Nlc3MgREVUQUlMUyBzZWN0aW9uXHJcbiAgbGV0IGRldGFpbHMgPSBwYXJ0c1sxXS50cmltKCk7XHJcbiAgXHJcbiAgLy8gUmVtb3ZlIG1hcmtkb3duIGJvbGQvaXRhbGljIGZvcm1hdHRpbmcgZnJvbSBib3RoIHNlY3Rpb25zXHJcbiAgdGxkciA9IHRsZHIucmVwbGFjZSgvXFwqXFwqKC4qPylcXCpcXCovZywgJyQxJyk7XHJcbiAgdGxkciA9IHRsZHIucmVwbGFjZSgvXFwqKC4qPylcXCovZywgJyQxJyk7XHJcbiAgdGxkciA9IHRsZHIucmVwbGFjZSgvXFwqKy9nLCAnJyk7XHJcbiAgXHJcbiAgZGV0YWlscyA9IGRldGFpbHMucmVwbGFjZSgvXFwqXFwqKC4qPylcXCpcXCovZywgJyQxJyk7XHJcbiAgZGV0YWlscyA9IGRldGFpbHMucmVwbGFjZSgvXFwqKC4qPylcXCovZywgJyQxJyk7XHJcbiAgZGV0YWlscyA9IGRldGFpbHMucmVwbGFjZSgvXFwqKy9nLCAnJyk7XHJcbiAgXHJcbiAgcmV0dXJuIHsgXHJcbiAgICB0bGRyOiB0bGRyLCBcclxuICAgIGRldGFpbHM6IGRldGFpbHMgXHJcbiAgfTtcclxufTsgIl0sIm5hbWVzIjpbImZvcm1hdE51bWJlcnNJblRleHQiLCJ0ZXh0IiwiU3RyaW5nIiwiZm9ybWF0dGVkVGV4dCIsInJlcGxhY2UiLCJtYXRjaCIsIm51bWJlciIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiY3VycmVuY3kiLCJzcGxpdEFuc3dlckNvbnRlbnQiLCJjb250ZW50IiwidGxkciIsImRldGFpbHMiLCJwYXJ0cyIsInNwbGl0IiwibGVuZ3RoIiwiY2xlYW5Db250ZW50IiwidHJpbSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/formatters.ts\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/filesService.js":
/*!**************************************!*\
  !*** ./app/services/filesService.js ***!
  \**************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   filesService: () => (/* binding */ filesService)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/supabase */ \"(app-pages-browser)/./app/lib/supabase.js\");\n/**\r\n * Service for handling file operations with Supabase\r\n */ \n/**\r\n * Formats file size in a human-readable format\r\n */ const formatFileSize = (bytes)=>{\n    if (bytes < 1024) return bytes + ' bytes';\n    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n    else return (bytes / 1048576).toFixed(1) + ' MB';\n};\n/**\r\n * Extract text from PDF file\r\n */ const extractTextFromPDF = async (file)=>{\n    try {\n        const arrayBuffer = await file.arrayBuffer();\n        // Here, we'll just read the file as text for simplicity\n        // In a real app, you would use a PDF parsing library like pdf.js\n        const textDecoder = new TextDecoder('utf-8');\n        try {\n            // Get the raw text from the PDF\n            const rawText = textDecoder.decode(arrayBuffer);\n            // Clean the text by removing null bytes and other control characters\n            // This prevents PostgreSQL from rejecting the content\n            const cleanedText = rawText.replace(/\\u0000/g, '') // Remove null bytes\n            .replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]/g, ''); // Remove other control characters\n            console.log(\"PDF processed, removed \".concat(rawText.length - cleanedText.length, \" invalid characters\"));\n            return cleanedText;\n        } catch (error) {\n            console.error('Error decoding PDF text:', error);\n            return 'Unable to extract text from PDF';\n        }\n    } catch (error) {\n        console.error('Error reading PDF:', error);\n        return '';\n    }\n};\n/**\r\n * Extract data from Excel file\r\n */ const extractTextFromExcel = async (file)=>{\n    try {\n        // In a real app, you would use a library like xlsx or exceljs\n        // For now, we'll just return a placeholder\n        return \"Extracted text from Excel file: \".concat(file.name);\n    } catch (error) {\n        console.error('Error reading Excel file:', error);\n        return '';\n    }\n};\n/**\r\n * Uploads a document to Supabase storage and database\r\n */ const uploadDocument = async (file)=>{\n    try {\n        console.log(\"Processing document: \".concat(file.name, \", type: \").concat(file.type, \", size: \").concat(file.size, \" bytes\"));\n        // Extract text content from PDF\n        let textContent = '';\n        if (file.type === 'application/pdf') {\n            console.log('Processing as PDF...');\n            try {\n                textContent = await extractTextFromPDF(file);\n                console.log(\"PDF processing complete, extracted \".concat(textContent.length, \" characters\"));\n                // Limit the text content size to prevent database issues\n                // PostgreSQL has a limit on text column size\n                if (textContent.length > 1000000) {\n                    console.log(\"Text content too large (\".concat(textContent.length, \" chars), truncating...\"));\n                    textContent = textContent.substring(0, 1000000) + '... [content truncated]';\n                }\n            } catch (pdfError) {\n                console.error('PDF extraction error:', pdfError);\n                textContent = 'Error extracting PDF content';\n            }\n        } else {\n            console.log(\"Unsupported document type: \".concat(file.type, \", no text extraction performed\"));\n        }\n        // Upload file to Supabase Storage\n        const fileName = \"\".concat(Date.now(), \"-\").concat(file.name);\n        console.log(\"Uploading file to Supabase storage bucket 'documents' with name: \".concat(fileName));\n        const { error: uploadError, data: storageData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from('documents').upload(fileName, file, {\n            cacheControl: '3600',\n            upsert: false\n        });\n        if (uploadError) {\n            console.error('Storage upload error:', JSON.stringify(uploadError));\n            throw new Error(\"Storage upload error: \".concat(JSON.stringify(uploadError)));\n        }\n        console.log('File successfully uploaded to storage, getting public URL');\n        // Get the public URL\n        const { data: { publicUrl } } = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from('documents').getPublicUrl(fileName);\n        console.log(\"Public URL generated: \".concat(publicUrl));\n        // Create database record\n        console.log('Creating database record for the uploaded file');\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('documents').insert([\n            {\n                title: file.name,\n                file_path: fileName,\n                file_type: file.type,\n                file_size: file.size,\n                content: textContent,\n                public_url: publicUrl\n            }\n        ]).select();\n        if (error) {\n            console.error('Database insert error:', JSON.stringify(error));\n            throw new Error(\"Database insert error: \".concat(JSON.stringify(error)));\n        }\n        console.log('Document successfully uploaded and recorded in database');\n        // Return formatted document\n        return {\n            id: data[0].id,\n            name: data[0].title,\n            type: 'document',\n            content: data[0].content,\n            size: formatFileSize(data[0].file_size),\n            uploadDate: new Date(data[0].created_at),\n            url: data[0].public_url\n        };\n    } catch (error) {\n        console.error('Upload document error:', error);\n        throw error;\n    }\n};\n/**\r\n * Uploads a spreadsheet to Supabase storage and database\r\n */ const uploadSpreadsheet = async (file)=>{\n    try {\n        console.log(\"Processing spreadsheet: \".concat(file.name, \", type: \").concat(file.type, \", size: \").concat(file.size, \" bytes\"));\n        // Extract content from Excel\n        let textContent = '';\n        let structuredData = null;\n        if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls') || file.type.includes('excel')) {\n            console.log('Processing as Excel...');\n            textContent = await extractTextFromExcel(file);\n            // In a real app, you would parse the Excel data into structured JSON\n            structuredData = JSON.stringify([\n                [\n                    'Header 1',\n                    'Header 2'\n                ],\n                [\n                    'Data 1',\n                    'Data 2'\n                ]\n            ]);\n            console.log(\"Excel processing complete, extracted \".concat(textContent.length, \" characters\"));\n        } else {\n            console.log(\"Unsupported spreadsheet type: \".concat(file.type, \", no text extraction performed\"));\n        }\n        // Upload file to Supabase Storage\n        const fileName = \"\".concat(Date.now(), \"-\").concat(file.name);\n        console.log(\"Uploading file to Supabase storage bucket 'spreadsheets' with name: \".concat(fileName));\n        const { error: uploadError, data: storageData } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from('spreadsheets').upload(fileName, file, {\n            cacheControl: '3600',\n            upsert: false\n        });\n        if (uploadError) {\n            console.error('Storage upload error:', JSON.stringify(uploadError));\n            throw new Error(\"Storage upload error: \".concat(JSON.stringify(uploadError)));\n        }\n        console.log('File successfully uploaded to storage, getting public URL');\n        // Get the public URL\n        const { data: { publicUrl } } = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from('spreadsheets').getPublicUrl(fileName);\n        console.log(\"Public URL generated: \".concat(publicUrl));\n        // Create database record\n        console.log('Creating database record for the uploaded file');\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('documents').insert([\n            {\n                title: file.name,\n                file_path: fileName,\n                file_type: \"spreadsheet/\".concat(file.type),\n                file_size: file.size,\n                content: textContent,\n                structured_data: structuredData,\n                public_url: publicUrl\n            }\n        ]).select();\n        if (error) {\n            console.error('Database insert error:', JSON.stringify(error));\n            throw new Error(\"Database insert error: \".concat(JSON.stringify(error)));\n        }\n        console.log('Spreadsheet successfully uploaded and recorded in database');\n        // Return formatted spreadsheet\n        return {\n            id: data[0].id,\n            name: data[0].title,\n            type: 'spreadsheet',\n            data: JSON.parse(data[0].structured_data || '[[]]'),\n            size: formatFileSize(data[0].file_size),\n            uploadDate: new Date(data[0].created_at),\n            url: data[0].public_url\n        };\n    } catch (error) {\n        console.error('Upload spreadsheet error:', error);\n        throw error;\n    }\n};\n/**\r\n * Retrieves all files from Supabase\r\n */ const getFiles = async ()=>{\n    try {\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('documents').select('*').order('created_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data.map((file)=>{\n            if (file.file_type.includes('spreadsheet')) {\n                // Return as Spreadsheet type\n                return {\n                    id: file.id,\n                    name: file.title || file.name,\n                    type: 'spreadsheet',\n                    data: file.structured_data ? JSON.parse(file.structured_data) : [\n                        []\n                    ],\n                    size: formatFileSize(file.file_size || 0),\n                    uploadDate: new Date(file.created_at),\n                    url: file.public_url\n                };\n            } else {\n                // Return as Document type\n                return {\n                    id: file.id,\n                    name: file.title || file.name,\n                    type: 'document',\n                    content: file.content || '',\n                    size: formatFileSize(file.file_size || 0),\n                    uploadDate: new Date(file.created_at),\n                    url: file.public_url\n                };\n            }\n        });\n    } catch (e) {\n        console.warn('Could not fetch files from Supabase:', e);\n        return [];\n    }\n};\n/**\r\n * Deletes a file by ID\r\n */ const deleteFile = async (id)=>{\n    try {\n        // First get the file info to get the storage path\n        const { data: file } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('documents').select('file_path, file_type').eq('id', id).single();\n        if (file) {\n            // Determine the storage bucket based on file type\n            const bucket = file.file_type.includes('spreadsheet') ? 'spreadsheets' : 'documents';\n            // Delete from storage\n            const { error: storageError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(bucket).remove([\n                file.file_path\n            ]);\n            if (storageError) {\n                console.error('Storage delete error:', storageError);\n            }\n        }\n        // Delete from database\n        const { error: dbError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('documents').delete().eq('id', id);\n        if (dbError) throw dbError;\n        return true;\n    } catch (error) {\n        console.error('Error deleting file:', error);\n        throw error;\n    }\n};\nconst filesService = {\n    uploadDocument,\n    uploadSpreadsheet,\n    getFiles,\n    deleteFile,\n    extractTextFromPDF,\n    extractTextFromExcel\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/filesService.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/chatService.js":
/*!*************************************!*\
  !*** ./app/services/chatService.js ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatService: () => (/* binding */ chatService)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(app-pages-browser)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _excelAIService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./excelAIService */ \"(app-pages-browser)/./app/services/excelAIService.js\");\n// Updated chatService.js\n\n\n// Define a fallback API key for development purposes\n// In production, this should be replaced with your actual OpenAI API key\nconst FALLBACK_API_KEY = \"sk-fallback-development-mode-key\";\n// Log a message about the API key for debugging\nconsole.log(\"API Key present (NEXT_PUBLIC_OPENAI_API_KEY):\", !!\"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\");\nconsole.log(\"API Key format:\",  true ? \"starts with \".concat(\"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\".substring(0, 8), \"...\") : 0);\n// Use the NEXT_PUBLIC_ prefixed key since we're in a client component\n// Fall back to the development key if the environment variable is not set\nconst apiKey = \"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\" || 0;\n// Check if this is a project-based API key\nconst isProjectKey = apiKey.startsWith('sk-proj-');\nconsole.log(\"Using project-based API key:\", isProjectKey);\n// Get the project ID from environment variable or extract from the key\nconst projectId = \"G3mOyHIp0RF8chZJEPDh\" || (0);\nconsole.log(\"Project ID:\", projectId ? \"\".concat(projectId.substring(0, 8), \"...\") : \"Not available\");\n// Create the OpenAI client with the appropriate configuration\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: apiKey,\n    dangerouslyAllowBrowser: true,\n    // For project-based keys, we need to specify the project ID\n    ...isProjectKey && projectId && {\n        projectId: projectId,\n        baseURL: 'https://api.openai.com/v1' // Ensure we're using the correct base URL\n    }\n});\n// Keywords that might indicate an Excel-related question\nconst EXCEL_KEYWORDS = [\n    'excel',\n    'spreadsheet',\n    'financial',\n    'financials',\n    'finance',\n    'revenue',\n    'profit',\n    'margin',\n    'budget',\n    'forecast',\n    'sales',\n    'growth',\n    'expense',\n    'cash',\n    'flow',\n    'balance',\n    'sheet',\n    'income',\n    'statement',\n    'ratio',\n    'metric',\n    'trend',\n    'projection',\n    'quarterly',\n    'annual'\n];\n// Function to prepare Excel content for better AI understanding\nconst prepareExcelContextForAI = (content)=>{\n    // Format the Excel content for better AI understanding\n    if (!content) return '';\n    // Add a prefix to help the AI understand this is spreadsheet data\n    return \"[Excel Spreadsheet Data]:\\n\".concat(content);\n};\nconst chatService = {\n    async sendMessage (message) {\n        let files = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n        try {\n            // Check if we're using the fallback key\n            const isDevelopmentMode = apiKey === FALLBACK_API_KEY;\n            if (!apiKey) {\n                console.error('OpenAI API key is missing');\n                throw new Error('OpenAI API key is not configured. Please check your .env.local file.');\n            }\n            console.log(\"Processing request with \".concat(files.length, \" files\"));\n            // Check if any files are available\n            if (!files || files.length === 0) {\n                console.warn('No files available for analysis');\n                return {\n                    text: \"I don't see any uploaded documents to analyze. Please upload a pitch deck (PDF) and financial document (Excel) first.\"\n                };\n            }\n            // If we're in development mode with the fallback key, return a mock response\n            if (isDevelopmentMode) {\n                console.log(\"DEVELOPMENT MODE: Using mock response instead of calling OpenAI API\");\n                return this.getMockResponse(message, files);\n            }\n            console.log(\"Using API key:\", apiKey.substring(0, 10) + \"...\");\n            // Create a context message based on files if they exist\n            let contextMessage = '';\n            if (files && files.length > 0) {\n                console.log(\"Files detected:\", files.map((f)=>\"\".concat(f.name, \" (\").concat(f.type, \")\")).join(', '));\n                const pdfFiles = files.filter((file)=>{\n                    var _file_name;\n                    return (_file_name = file.name) === null || _file_name === void 0 ? void 0 : _file_name.toLowerCase().endsWith('.pdf');\n                });\n                const excelFiles = files.filter((file)=>{\n                    var _file_name, _file_name1;\n                    return ((_file_name = file.name) === null || _file_name === void 0 ? void 0 : _file_name.toLowerCase().endsWith('.xlsx')) || ((_file_name1 = file.name) === null || _file_name1 === void 0 ? void 0 : _file_name1.toLowerCase().endsWith('.xls'));\n                });\n                // Add file names as context\n                if (pdfFiles.length > 0) {\n                    contextMessage += \"\\nPDF Documents: \".concat(pdfFiles.map((f)=>f.name).join(', '), \"\\n\");\n                }\n                if (excelFiles.length > 0) {\n                    contextMessage += \"\\nExcel Files: \".concat(excelFiles.map((f)=>f.name).join(', '), \"\\n\");\n                }\n                // Add selected file content for context (limiting to avoid token usage)\n                let fileContentAdded = 0;\n                // Add content from PDF files first\n                for (const file of pdfFiles){\n                    if (file.content && file.content.length > 0 && fileContentAdded < 3) {\n                        // Smart PDF content extraction\n                        let pdfContent = file.content;\n                        const contentLength = pdfContent.length;\n                        // Log the total size of the PDF content\n                        console.log(\"PDF \".concat(file.name, \" content length: \").concat(contentLength, \" characters\"));\n                        // If PDF is very large, implement smarter extraction\n                        if (contentLength > 30000) {\n                            // Define key sections we want to extract\n                            const keyPhrases = [\n                                \"management team\",\n                                \"leadership team\",\n                                \"executive team\",\n                                \"founders\",\n                                \"annual recurring revenue\",\n                                \"arr\",\n                                \"burn rate\",\n                                \"runway\",\n                                \"financials\",\n                                \"financial summary\",\n                                \"metrics\",\n                                \"kpi\",\n                                \"key performance\",\n                                \"problem\",\n                                \"solution\",\n                                \"value proposition\",\n                                \"market opportunity\"\n                            ];\n                            // Initialize extracted content\n                            let extractedContent = \"\";\n                            const chunkSize = 10000; // Size of each chunk to process\n                            // Add beginning of document (always important)\n                            extractedContent += pdfContent.substring(0, 8000) + \"\\n...\\n\";\n                            // Process the document in chunks to find key sections\n                            for(let i = 8000; i < contentLength; i += chunkSize){\n                                const chunk = pdfContent.substring(i, Math.min(i + chunkSize, contentLength));\n                                // Check if this chunk contains any key phrases\n                                const containsKeyPhrase = keyPhrases.some((phrase)=>chunk.toLowerCase().includes(phrase.toLowerCase()));\n                                if (containsKeyPhrase) {\n                                    extractedContent += chunk + \"\\n...\\n\";\n                                }\n                            }\n                            // Always include the end of the document (where team info often appears)\n                            const endSection = pdfContent.substring(Math.max(0, contentLength - 10000));\n                            if (!extractedContent.includes(endSection)) {\n                                extractedContent += \"\\n...\\n\" + endSection;\n                            }\n                            pdfContent = extractedContent;\n                            console.log(\"Extracted \".concat(pdfContent.length, \" characters of key sections from PDF\"));\n                        } else {\n                            // For smaller PDFs, just use all the content\n                            pdfContent = pdfContent.substring(0, 30000);\n                        }\n                        contextMessage += \"\\n--- Content from PDF: \".concat(file.name, \" ---\\n\").concat(pdfContent, \"\\n--- End of PDF excerpt ---\\n\\n\");\n                        fileContentAdded++;\n                    }\n                }\n                // Add content from Excel files next\n                for (const file of excelFiles){\n                    if (file.content && file.content.length > 0 && fileContentAdded < 5) {\n                        // Smart Excel content extraction\n                        let excelContent = file.content;\n                        const contentLength = excelContent.length;\n                        // Log the total size of the Excel content\n                        console.log(\"Excel \".concat(file.name, \" content length: \").concat(contentLength, \" characters\"));\n                        // Check if the Excel content contains sheet separators\n                        const sheetSeparatorPattern = /--- Sheet: (.+?) ---/g;\n                        const sheetMatches = [\n                            ...excelContent.matchAll(sheetSeparatorPattern)\n                        ];\n                        if (sheetMatches.length > 0) {\n                            console.log(\"Excel file contains \".concat(sheetMatches.length, \" sheets\"));\n                            // Define high-priority sheet keywords for financial data\n                            const highPrioritySheets = [\n                                \"financial\",\n                                \"finance\",\n                                \"cash flow\",\n                                \"burn\",\n                                \"runway\",\n                                \"kpi\",\n                                \"metrics\",\n                                \"performance\",\n                                \"summary\",\n                                \"revenue\",\n                                \"arr\",\n                                \"dashboard\",\n                                \"mrr\"\n                            ];\n                            // Extract content by finding and prioritizing important sheets\n                            let extractedContent = \"\";\n                            // First pass: extract high-priority sheets\n                            for(let i = 0; i < sheetMatches.length; i++){\n                                const sheetNameMatch = sheetMatches[i];\n                                const sheetName = sheetNameMatch[1].toLowerCase();\n                                // Determine if this is a high-priority sheet\n                                const isHighPriority = highPrioritySheets.some((keyword)=>sheetName.includes(keyword));\n                                if (isHighPriority) {\n                                    // Find the start of this sheet's content\n                                    const sheetStart = sheetNameMatch.index;\n                                    // Find the end (either the next sheet or the end of content)\n                                    const nextSheetMatch = sheetMatches[i + 1];\n                                    const sheetEnd = nextSheetMatch ? nextSheetMatch.index : contentLength;\n                                    // Extract the sheet content (up to 15000 chars per priority sheet)\n                                    const sheetContent = excelContent.substring(sheetStart, Math.min(sheetStart + 15000, sheetEnd));\n                                    extractedContent += sheetContent + \"\\n\\n\";\n                                }\n                            }\n                            // If we didn't get much from priority sheets, add content from all sheets\n                            if (extractedContent.length < 10000) {\n                                extractedContent = \"\"; // Reset and try a different approach\n                                // Take the first 5000 chars from each sheet, up to 8 sheets\n                                for(let i = 0; i < Math.min(sheetMatches.length, 8); i++){\n                                    const sheetNameMatch = sheetMatches[i];\n                                    const sheetName = sheetNameMatch[1];\n                                    // Find the start of this sheet's content\n                                    const sheetStart = sheetNameMatch.index;\n                                    // Find the end (either the next sheet or the end of content)\n                                    const nextSheetMatch = sheetMatches[i + 1];\n                                    const sheetEnd = nextSheetMatch ? nextSheetMatch.index : contentLength;\n                                    // Extract the sheet content\n                                    const sheetContent = excelContent.substring(sheetStart, Math.min(sheetStart + 5000, sheetEnd));\n                                    extractedContent += sheetContent + \"\\n\\n\";\n                                }\n                            }\n                            excelContent = extractedContent;\n                            console.log(\"Extracted \".concat(excelContent.length, \" characters from Excel sheets\"));\n                        } else {\n                            // If no sheet separators, just take a larger chunk\n                            excelContent = excelContent.substring(0, 30000);\n                        }\n                        contextMessage += \"\\n--- Content from Excel: \".concat(file.name, \" ---\\n\").concat(excelContent, \"\\n--- End of Excel excerpt ---\\n\\n\");\n                        fileContentAdded++;\n                    }\n                }\n            }\n            // Combine the context and user message\n            const fullMessage = contextMessage ? \"I have the following documents in my repository:\\n\".concat(contextMessage, \"\\n\\nBased on these documents, please respond to this request:\\n\\n\").concat(message, \"\\n\\nThe above instructions are VERY IMPORTANT and should be followed precisely when analyzing the documents.\") : message;\n            console.log(\"Context message length:\", contextMessage.length);\n            console.log(\"Sending request to OpenAI...\");\n            try {\n                // Select an appropriate model based on the API key type\n                // Project-based keys may have limited model access\n                let model = \"o1-mini\"; // Changed to o1-mini as requested\n                // Log the model being used\n                console.log(\"Using model: \".concat(model));\n                const response = await openai.chat.completions.create({\n                    model: model,\n                    messages: [\n                        {\n                            role: \"user\",\n                            content: \"You are an expert financial analyst with deep experience reviewing investment documents like pitch decks and financial spreadsheets. Your job is to THOROUGHLY examine the provided documents for SPECIFIC information.\\n\\n\" + \"CRITICAL REQUIREMENTS:\\n\" + \"1. NEVER say information is missing until you've searched the ENTIRE document\\n\" + \"2. For Excel data: pay close attention to ALL column headers and row labels\\n\" + \"3. For PDFs: check EVERY page, including sections near the end about team members\\n\" + \"4. When information seems missing, try alternative terms and look in different sections\\n\" + \"5. ONLY use information from the provided documents - don't make assumptions\\n\\n\" + fullMessage\n                        }\n                    ],\n                    temperature: 1,\n                    max_completion_tokens: 40000 // Changed from max_tokens to max_completion_tokens as required by o1-mini\n                });\n                if (!response || !response.choices || !response.choices[0] || !response.choices[0].message) {\n                    throw new Error('Received invalid response structure from OpenAI API');\n                }\n                const text = response.choices[0].message.content;\n                // Check if this is an investment memo question (from the message content)\n                if (message.includes('Investment Memo') || message.includes('investment memo')) {\n                    // For investment memo questions, return just the text\n                    return text;\n                }\n                // For regular chat questions, return the object with text and suggested questions\n                return {\n                    text,\n                    suggestedQuestions: []\n                };\n            } catch (apiError) {\n                console.error('OpenAI API Error:', apiError);\n                // Handle different types of API errors\n                if (apiError.status === 401) {\n                    console.log('Authentication error with OpenAI API');\n                    // Check if we're using a project key and provide specific guidance\n                    if (isProjectKey) {\n                        console.log('Project-based API key detected. This may require special configuration.');\n                        return {\n                            text: 'There was an authentication issue with your OpenAI project-based API key. \\n                    Project keys (starting with sk-proj-) may have specific model access restrictions or require additional configuration.\\n                    \\n                    Please check:\\n                    1. Your project has access to the o1-mini model\\n                    2. The key has not expired or been revoked\\n                    3. Your project has sufficient credits\\n                    \\n                    For testing purposes, this is a mock response to your question: \"'.concat(message, '\"'),\n                            suggestedQuestions: []\n                        };\n                    }\n                    // Fall back to mock response for testing\n                    return this.getMockResponse(message, files);\n                }\n                // Handle model availability issues\n                if (apiError.status === 404 || apiError.message && apiError.message.includes('model')) {\n                    console.log('Model not available. Trying fallback model...');\n                    // Return a helpful message about model availability\n                    return {\n                        text: \"The requested AI model is not available with your current API key configuration.\\n                  \\n                  This could be because:\\n                  1. Your API key doesn't have access to the requested model\\n                  2. You're using a project-based key with limited model access\\n                  3. The model name may have changed\\n                  \\n                  For testing purposes, this is a mock response to your question: \\\"\".concat(message, '\"'),\n                        suggestedQuestions: []\n                    };\n                }\n                throw apiError;\n            }\n        } catch (error) {\n            console.error('Error in AI chat:', error);\n            // Provide more specific error messages based on the error type\n            if (error.status === 401) {\n                throw new Error(\"Authentication error: Your OpenAI API key appears to be invalid or has expired. \\n                        Please check your .env.local file and ensure NEXT_PUBLIC_OPENAI_API_KEY is set correctly.\\n                        Note that project-based keys (sk-proj-*) may have different requirements.\");\n            } else if (error.status === 429) {\n                throw new Error(\"Rate limit exceeded: Your OpenAI API key has reached its rate limit or quota.\\n                        Please check your usage limits or try again later.\");\n            } else if (error.message && error.message.includes('API key')) {\n                throw new Error(\"API key issue: \".concat(error.message));\n            } else if (error.message && error.message.includes('model')) {\n                throw new Error(\"Model error: The requested AI model is not available with your current API key.\\n                        Project-based keys may have limited model access.\");\n            } else {\n                throw new Error(\"Failed to get response from AI: \".concat(error.message || 'Unknown error'));\n            }\n        }\n    },\n    isExcelRelatedQuestion (question) {\n        const lowerQuestion = question.toLowerCase();\n        return EXCEL_KEYWORDS.some((keyword)=>lowerQuestion.includes(keyword.toLowerCase()));\n    },\n    async getSuggestedExcelQuestions (files) {\n        try {\n            var _latestExcelFile_excelData_metadata;\n            // Check if we're using the fallback key\n            const isDevelopmentMode = apiKey === FALLBACK_API_KEY;\n            // Filter for Excel files only\n            const excelFiles = files.filter((file)=>file.type !== 'note' && (file.name.toLowerCase().endsWith('.xlsx') || file.name.toLowerCase().endsWith('.xls')));\n            if (excelFiles.length === 0) {\n                return [];\n            }\n            // If we're in development mode, return mock suggestions\n            if (isDevelopmentMode) {\n                console.log(\"DEVELOPMENT MODE: Using mock Excel question suggestions\");\n                return [\n                    \"What is the revenue growth rate year-over-year?\",\n                    \"What is the current customer acquisition cost (CAC)?\",\n                    \"What is the customer lifetime value (LTV)?\",\n                    \"What are the main expense categories?\",\n                    \"How has the gross margin changed over time?\"\n                ];\n            }\n            // Get the most recently uploaded Excel file\n            const latestExcelFile = excelFiles[0];\n            // Get the context for this file\n            const contextData = {\n                sheets: ((_latestExcelFile_excelData_metadata = latestExcelFile.excelData.metadata) === null || _latestExcelFile_excelData_metadata === void 0 ? void 0 : _latestExcelFile_excelData_metadata.sheets) || [],\n                metadata: latestExcelFile.excelData.metadata\n            };\n            return (0,_excelAIService__WEBPACK_IMPORTED_MODULE_0__.getSuggestedQuestions)(contextData);\n        } catch (error) {\n            console.error('Error generating Excel questions:', error);\n            return [];\n        }\n    },\n    getMockResponse (message) {\n        let files = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n        // Create a mock response based on the question type\n        const fileNames = files.map((f)=>f.name).join(\", \");\n        // Check if this is an investment memo question\n        if (message.includes(\"Annual Recurring Revenue\")) {\n            return \"Based on the financial data provided, the company's current Annual Recurring Revenue (ARR) is $40.49 million AUD (US$31.23 million). This figure is sourced from the most recent financial reports dated March 2021.\";\n        }\n        if (message.includes(\"burn rate\")) {\n            return \"The current monthly burn rate is approximately $2.1 million AUD (US$1.62 million), calculated as an average of the last three months of operational expenses.\";\n        }\n        if (message.includes(\"runway\")) {\n            return \"Based on the current cash reserves of $25.3 million AUD and a monthly burn rate of $2.1 million AUD, the company has approximately 12 months of runway remaining.\";\n        }\n        if (message.includes(\"management team\")) {\n            return \"The key members of the management team include:\\n\\n- Sarah Johnson, CEO - Former VP of Product at Salesforce with 15+ years in SaaS\\n- Michael Chen, CTO - Previously led engineering teams at Google and Dropbox\\n- Emma Rodriguez, CFO - 12 years of financial leadership in tech startups\\n- David Kim, COO - Background in operations at Amazon and Uber\";\n        }\n        if (message.includes(\"profitable\")) {\n            return \"The company is not yet profitable. According to the financial data, they are currently operating at a loss with a negative profit margin of -15%. However, they project reaching profitability within the next 18 months based on their current growth trajectory.\";\n        }\n        // Default response for other questions\n        return \"This is a development mode response. In production, this would call the OpenAI API to analyze your documents (\".concat(fileNames, ') and answer your question about: \"').concat(message, '\".');\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/chatService.js\n"));

/***/ })

});